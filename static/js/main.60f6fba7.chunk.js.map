{"version":3,"sources":["api/pokemons.jsx","components/PokemonsList/PokemonsList.jsx","components/SelectedPokemon/SelectedPokemon.jsx","App.js","reportWebVitals.js","index.js"],"names":["getPokemon","url","a","fetch","json","PokemonsList","pokemons","onAddPokemon","count","types","filterValue","result","length","filter","pok","type","name","className","map","pokemon","i","onClick","width","src","id","toUpperCase","slice","typ","SelectedPokemon","console","log","stats","item","stat","base_stat","typess","App","useState","setPokemons","setPokemon","setTypes","setCount","setFilterValue","useEffect","then","res","getPokemons","results","poke","old","every","pokem","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60f6fba7.chunk.js","sourcesContent":["const BASE_URL = 'https://pokeapi.co/api/v2/pokemon';\n\nexport const getPokemons = (count) => {\n  return fetch(`${BASE_URL}?limit=${count}`).then(res => res.json())\n}\n\nexport const getPokemon = async(url) => \n  (await fetch(`${url}`)).json();\n\n\nexport const getTypes = () => {\n  return fetch('http://pokeapi.co/api/v2/type/').then(res => res.json())\n}","import React, { useState, useEffect } from 'react';\nimport { getTypes } from '../../api/pokemons';\nimport './PokemonsList.scss';\n\n\nexport const PokemonsList = ({ pokemons, onAddPokemon, count, types, filterValue }) => {\n  \n  // console.log(types, count)\n  // if(!stats) {\n  //   return \"Loading...\";\n  // }\n\n  let result = types;\n\n  if(filterValue && result.length === count) {\n    result = result.filter(pok => pok.types[0].type.name === filterValue)\n  }\n\n\n\n  return (\n    <ul className=\"pokemons__list\"> \n      {\n        result && result.map((pokemon, i) => (\n          \n            <li \n              key={pokemon.name}\n              onClick={() => onAddPokemon(pokemons[i].url)}\n              className=\"pokemons__item item\"\n            >\n              <img \n                width=\"100px\" \n                src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`}\n                className=\"item__img\"\n              />\n                {/* <p className=\"item__number\">#{parseFloat(pokemon.id)}</p> */}\n                <p className=\"item__name\">\n                  {pokemon.name[0].toUpperCase() + pokemon.name.slice(1)}\n                </p>\n                <p className=\"item__types\">\n                  {\n                    types[i] ? pokemon.types.map(typ => (\n                      <span className=\"item__type\">{typ.type.name[0].toUpperCase() + typ.type.name.slice(1)}</span>\n                    )) \n                    : \n                    \"Loading...\"}</p>\n            </li>\n        ))\n      }\n    </ul>\n  );\n};","import React from 'react';\nimport './SelectedPokemon.scss';\n\nexport const SelectedPokemon = ({pokemon}) => {\n  console.log(pokemon)\n  return (\n    <div className=\"selected-pokemon\">\n      <div className=\"selected-pokemon__container\">\n        <div><img width=\"100px\" src = {`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`}/></div>\n        {\n          pokemon.stats && pokemon.stats.map(item => (\n            <div key={item.name}>\n              {item.stat.name} : {item.base_stat}\n            </div>\n          ))\n          \n        }\n        <div>Type: {pokemon && pokemon.types.map((item, i, typess) => (\n          <p key={typess[i].name}>{typess[i].type.name}</p>\n        ))}</div>\n        <p>{pokemon.name}</p>\n      </div>\n  </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport { PokemonsList } from './components/PokemonsList/PokemonsList';\nimport { getPokemons, getPokemon } from './api/pokemons';\nimport { SelectedPokemon } from './components/SelectedPokemon/SelectedPokemon';\n\nfunction App() {\n  const [pokemons, setPokemons] = useState([]);\n  const [pokemon, setPokemon] = useState('');\n  const [types, setTypes] = useState([]);\n  const [count, setCount] = useState(12)\n  const [filterValue, setFilterValue] = useState('');\n\n  useEffect(()=> {\n    getPokemons(count).then(pokemons => setPokemons(pokemons.results))\n  }, [count])\n\n  useEffect(() => {\n    pokemons.map((poke) => getPokemon(poke.url).then(pok => setTypes((old) => {\n      if(old.every(pokem => pokem.name !== pok.name )) {\n        return [...old, pok];\n      }\n\n      return [...old];\n    })))\n  }, [pokemons])\n\n\n  const fetchPokemon = (url) => {\n    getPokemon(url).then(pokemon => setPokemon(pokemon));\n  }\n\n\n  console.log(pokemon)\n\n  return (\n    <div className=\"App\">\n      <select onChange={(e) => setFilterValue(e.target.value)}>\n        <option value=\"\">All</option>\n        <option value=\"fire\">Fire</option>\n        <option value=\"water\">Water</option>\n        <option value=\"electric\">Electric</option>\n      </select>\n      <main className=\"main\">\n        <PokemonsList \n          pokemons={pokemons} \n          onAddPokemon={fetchPokemon} \n          types={types}\n          count={count}\n          filterValue={filterValue}\n        />\n        <SelectedPokemon pokemon={pokemon} />\n      </main>\n      <button onClick={() => setCount(count+10)}>More</button>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}