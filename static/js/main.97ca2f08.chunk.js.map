{"version":3,"sources":["components/PokemonsList/PokemonsList.jsx","api/pokemons.jsx","components/SelectedPokemon/SelectedPokemon.jsx","App.js","reportWebVitals.js","index.js"],"names":["PokemonsList","showPokemonInfo","pokemonsCount","pokemonsAllInfo","filterValue","firstToUppercase","resultPokemons","map","pokemon","imgUrl","id","url","length","filter","types","type","name","className","onClick","src","alt","typeItem","classNames","getPokemon","a","fetch","json","SelectedPokemon","selectedPokemon","repeat","String","cellSpacing","stats","property","stat","base_stat","weight","moves","App","useState","pokemons","setPokemons","setSelectedPokemon","setPokemonsAllInfo","setPokemonsCount","setFilterValue","pokemonsTypes","getPokemonsTypes","loadButtonRef","useRef","useEffect","count","then","res","pokemonsFromServer","results","pokemonFromServer","availablePokemons","every","pokemon_","current","scrollIntoView","behavior","fetchPokemon","useCallback","currentPokemon","string","toUpperCase","slice","value","onChange","target","ref","window","scrollTo","top","document","body","scrollHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.97ca2f08.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './PokemonsList.scss';\n\nexport const PokemonsList = ({\n  showPokemonInfo,\n  pokemonsCount,\n  pokemonsAllInfo,\n  filterValue,\n  firstToUppercase,\n}) => {\n  let resultPokemons = pokemonsAllInfo.map(pokemon => ({\n    ...pokemon,\n    imgUrl: `https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`,\n    url: `https://pokeapi.co/api/v2/pokemon/${pokemon.id}/`,\n  }));\n\n  if (filterValue && resultPokemons.length === pokemonsCount) {\n    resultPokemons = resultPokemons\n      .filter(pokemon => pokemon.types[0].type.name === filterValue\n        || (pokemon.types[1] && pokemon.types[1].type.name === filterValue));\n  }\n\n  return (\n    <ul className=\"pokemons__list\">\n      {\n        resultPokemons && resultPokemons.map(pokemon => (\n          <li\n            key={pokemon.name}\n            onClick={() => showPokemonInfo(pokemon.url)}\n            className=\"pokemons__item item\"\n          >\n            <img\n              src={pokemon.imgUrl}\n              className=\"item__img\"\n              alt=\"Pokemon\"\n            />\n            <p className=\"item__name\">\n              {firstToUppercase(pokemon.name)}\n            </p>\n            <p className=\"item__types\">\n              {\n                pokemon ? pokemon.types.map(typeItem => (\n                  <span className={classNames(\n                    'item__type',\n                    `item__type--${typeItem.type.name}`,\n                  )}\n                  >\n                    {firstToUppercase(typeItem.type.name)}\n                  </span>\n                ))\n                  : 'Loading...'\n              }\n            </p>\n          </li>\n        ))\n      }\n    </ul>\n  );\n};\n\nPokemonsList.propTypes = {\n  showPokemonInfo: PropTypes.func.isRequired,\n  pokemonsCount: PropTypes.number.isRequired,\n  pokemonsAllInfo: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    type: PropTypes.arrayOf(PropTypes.object).isRequired,\n  })).isRequired,\n  filterValue: PropTypes.string.isRequired,\n  firstToUppercase: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://pokeapi.co/api/v2/pokemon';\n\nexport const getPokemons = count => (\n  fetch(`${BASE_URL}?limit=${count}`).then(res => res.json())\n);\n\nexport const getPokemon = async url => (\n  (await fetch(`${url}`)).json()\n);\n\nexport const getTypes = () => (\n  fetch('https://pokeapi.co/api/v2/type/').then(res => res.json())\n);\n","/* eslint-disable operator-linebreak */\n/* eslint-disable react/jsx-wrap-multilines */\n/* eslint-disable react/jsx-closing-tag-location */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './SelectedPokemon.scss';\n\nexport const SelectedPokemon = ({\n  selectedPokemon,\n  firstToUppercase,\n}) => {\n  const imgBaseUrl = 'https://pokeres.bastionbot.org/images/pokemon/';\n\n  return (\n    selectedPokemon\n      ?\n      (<div className=\"selected-pokemon\">\n        <div className=\"selected-pokemon__container\">\n          <img\n            src={`${imgBaseUrl}${selectedPokemon.id}.png`}\n            className=\"selected-pokemon__img\"\n            alt=\"Pokemon\"\n          />\n          <h2 className=\"selected-pokemon__name\">\n            {firstToUppercase(selectedPokemon.name)}\n            {` #`}\n            {`${('0').repeat(3 - String(selectedPokemon.id)\n              .length) + selectedPokemon.id}`}\n          </h2>\n          <table cellSpacing=\"0\" className=\"selected-pokemon__property-table\">\n            <tbody>\n              <tr className=\"selected-pokemon__property-table\">\n                <td>Type</td>\n                <td>\n                  {\n                    selectedPokemon.types.map(typeItem => (\n                      <span key={typeItem.type.name}>\n                        {firstToUppercase(typeItem.type.name)}\n                        {' '}\n                      </span>\n                    ))\n                  }\n                </td>\n              </tr>\n              {\n                selectedPokemon.stats.map(property => (\n                  <tr key={property.name}>\n                    <td>{firstToUppercase(property.stat.name)}</td>\n                    <td>{property.base_stat}</td>\n                  </tr>\n                ))\n              }\n              <tr className=\"selected-pokemon__property-table\">\n                <td>Weight</td>\n                <td>{selectedPokemon.weight}</td>\n              </tr>\n              <tr className=\"selected-pokemon__property-table\">\n                <td>Total moves</td>\n                <td>{selectedPokemon.moves.length}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>) : null\n  );\n};\n\nSelectedPokemon.propTypes = {\n  selectedPokemon: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    types: PropTypes.arrayOf(PropTypes.object).isRequired,\n    stats: PropTypes.arrayOf(PropTypes.object).isRequired,\n    weight: PropTypes.number.isRequired,\n    moves: PropTypes.arrayOf(PropTypes.object).isRequired,\n  }).isRequired,\n  firstToUppercase: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { FaArrowCircleUp, FaArrowCircleDown } from 'react-icons/fa';\nimport './App.scss';\n\nimport { PokemonsList } from './components/PokemonsList/PokemonsList';\nimport { getPokemons, getPokemon, getTypes } from './api/pokemons';\nimport { SelectedPokemon } from './components/SelectedPokemon/SelectedPokemon';\n\nfunction App() {\n  const [pokemons, setPokemons] = useState([]);\n  const [selectedPokemon, setSelectedPokemon] = useState('');\n  const [pokemonsAllInfo, setPokemonsAllInfo] = useState([]);\n  const [pokemonsCount, setPokemonsCount] = useState(12);\n  const [filterValue, setFilterValue] = useState('');\n  const [pokemonsTypes, getPokemonsTypes] = useState([]);\n  const loadButtonRef = useRef(null);\n\n  useEffect(() => {\n    getPokemons(pokemonsCount)\n      .then(pokemonsFromServer => setPokemons(pokemonsFromServer.results));\n\n    getTypes().then(types => getPokemonsTypes(types.results));\n  }, [pokemonsCount]);\n\n  useEffect(() => {\n    pokemons.map(pokemon => getPokemon(pokemon.url)\n      .then(pokemonFromServer => setPokemonsAllInfo((availablePokemons) => {\n        if (availablePokemons.every(pokemon_ => pokemon_.name\n          !== pokemonFromServer.name)) {\n          return [...availablePokemons, pokemonFromServer];\n        }\n\n        return [...availablePokemons];\n      })));\n  }, [pokemons]);\n\n  useEffect(() => {\n    loadButtonRef.current.scrollIntoView({\n      behavior: 'smooth',\n    });\n  }, [pokemonsAllInfo]);\n\n  const fetchPokemon = useCallback((url) => {\n    getPokemon(url)\n      .then(pokemonFromServer => setSelectedPokemon((currentPokemon) => {\n        if (currentPokemon\n          && (currentPokemon.name === pokemonFromServer.name)) {\n          return;\n        }\n\n        // eslint-disable-next-line consistent-return\n        return pokemonFromServer;\n      }));\n  }, [selectedPokemon]);\n\n  const firstToUppercase = string => (\n    string[0].toUpperCase() + string.slice(1)\n  );\n\n  return (\n    <div className=\"app\">\n      <select\n        value={filterValue}\n        onChange={({ target }) => setFilterValue(target.value)}\n        className=\"app__select\"\n      >\n        <option value=\"\">all</option>\n        {\n          pokemonsTypes.map(type => (\n            <option value={type.name}>{type.name}</option>\n          ))\n        }\n      </select>\n      <main className=\"main\">\n        <PokemonsList\n          showPokemonInfo={fetchPokemon}\n          pokemonsAllInfo={pokemonsAllInfo}\n          pokemonsCount={pokemonsCount}\n          filterValue={filterValue}\n          firstToUppercase={firstToUppercase}\n        />\n        <SelectedPokemon\n          selectedPokemon={selectedPokemon}\n          firstToUppercase={firstToUppercase}\n        />\n      </main>\n\n      <button\n        type=\"button\"\n        onClick={() => setPokemonsCount(pokemonsCount + 10)}\n        className=\"app__button-load\"\n        ref={loadButtonRef}\n      >\n        Load more\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={() => window.scrollTo({\n          top: 0,\n          behavior: 'smooth',\n        })}\n        className=\"app__button-scroll-top\"\n      >\n        <FaArrowCircleUp />\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={() => window.scrollTo({\n          top: document.body.scrollHeight,\n          behavior: 'smooth',\n        })}\n        className=\"app__button-scroll-bottom\"\n      >\n        <FaArrowCircleDown />\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-next-line arrow-parens\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}